openapi: 3.0.0
info:
  description:
    api명세
  version:  "1.0.0"
  title:  swagger
servers:
  - url:  'http://localhost:8080/'
tags:
  - name: exchangePage
    description: 거래 게시판
  - name: exchangeReply
    description: 댓글
  - name: user
    description: 유저 정보
paths:
  /exchangePage:
    get:
      tags:
        - exchangePage
      summary: 게시판 페이지
      operationId: homePage
      parameters:
        - in: query
          name: searchPage
          description: 게시물 검색
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: 페이지 넘기기
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: 페이지 끝, 처음으로
          schema:
              type: integer
              format: int32
              minimum: 0
              maximum: 50
      responses:
        '200':
          description: 
  /exchangePage/post:
    post:
      tags:
        - exchangePage
      summary:  게시판 게시글 생성
      operationId: addPost
      parameter:
        - name: postId
          in: path
          description: update
          required: true
          schema:
            type: integer
            format: int64  
      responses:
        '200':
          description: success
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExchangePage'
    put:
      tags:
        - exchangePage
      summary: 게시판 게시글 수정
      operationId: updatePost
      responses:
        '400':
          description: Invalid ID
        '404':
          description: Post not found
        '405':
          description: invalid input
    delete:
      tags:
        - exchangePage
      summary: 게시판 게시글 삭제
      operationId: deletePost
      responses:
        '400':  
          description:  Invalid ID
        '404':
          description:  Post not found
  /exchangePage/Reply:
    post:
      tags:
        - exchangePage
      summary:  게시판 댓글 생성
      operationId: addReply
      responses:
        default:
          description: success
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExchangePage'
    put:
      tags:
        - exchangePage
      summary: 게시판 댓글 수정
      operationId: updateReply
      responses:
        '400':
          description: Invalid ID
        '404':
          description: Text not found
        '405':
          description: invalid input
    delete:
      tags:
        - exchangePage
      summary: 게시판 댓글 삭제
      operationId: deleteReply
      responses:
        '400':  
          description:  Invalid ID
        '404':
          description:  Text not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    ExchangePage:
      type: object
      required:
        - postId
        - userId
        - title
        - content
        - view_count
        - create_date
        - update_date
        - image
      properties:
        postId:
          type: integer
          format: int32
        userId:
          type: string
        title:
          type: string
          format: text
        view_count:
          type: integer
          format: int32
        create_date:
          type: string
          format: date-time
          example: '2023-10-10T22:28:33'
        update_time:
          type: string
          format: date-time
          example: '2023-10-11T08:11:56'
        image:
          type: image
    User:
      type: object
      properties:
        userId:
          type: string
        password:
          type: string
        email:
          type: string
        nickname:
          type: string
        region:
          type: string
    requestBodies:
       UserArray:
        content:
          application/json:
             schema:
              type: array
              items:
                $ref: '#/components/schema/User'
        description: List of user object
        required: true
    
        
        